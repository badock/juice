---
# See https://github.com/pingcap/docs/blob/master/op-guide/docker-deployment.md

- name: Create the directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - ["/opt/local/etc/tidb/conf.d/", "/tmp/data/tidb"]

- name: Generate the configuration file
  template:
    src: tidb.conf.j2
    dest: /opt/local/etc/tidb/conf.d/tidb.cnf
  with_list: "{{ [groups['database']] }}"

- name: Start the PD container
  docker_container:
    name: "tidb-pd-{{ inventory_hostname_short }}"
    image: "pingcap/pd"
    detach: True
    published_ports:
      - "2379:2379"
      - "2380:2380"
    volumes:
      - "/data:/data"
      - "/opt/local/etc/tidb/conf.d:/etc/tidb/conf.d"
    command: [
      "--name=\"tidbpd{{ inventory_hostname_short }}\"",
      "--data-dir=\"/data/tidbpd{{ inventory_hostname_short }}\"",
      "--config=/etc/tidb/conf.d/tidb.cnf",
      "--client-urls=\"http://0.0.0.0:2379\"",
      "--advertise-client-urls=\"http://{{ db_nodes_idx[inventory_hostname_short].address }}:2379\"",
      "--peer-urls=\"http://0.0.0.0:2380\"",
      "--advertise-peer-urls=\"http://{{ db_nodes_idx[inventory_hostname_short].address }}:2380\"",
      "--initial-cluster=\"{% for db_node in db_nodes %}tidbpd{{ db_node.shortname }}=http://{{ db_node.address }}:2380{% if not loop.last %},{% endif %}{% endfor %}\""
    ]


- name: Waiting for the TiDB PD container to be ready
  shell: docker logs tidb-pd-{{ inventory_hostname_short }}
  register: result
  until: result.stderr.find("ready to serve client requests") != -1
  retries: 10
  delay: 10


- name: Waiting for the TiDB PD container to expose its port
  wait_for:
    delay: 30
    host: "{{ db_nodes_idx[inventory_hostname_short].address }}"
    port: 2379


- name: Start the TiDB KV containers
  docker_container:
    name: "tidb-kv-{{ inventory_hostname_short }}-{{ item }}"
    image: "pingcap/tikv"
    detach: True
    exposed_ports:
      - "{{ item }}"
    published_ports:
      - "{{ item }}:{{ item }}"
    volumes:
      - "/data:/data"
      - "/opt/local/etc/tidb/conf.d:/etc/tidb/conf.d"
    command: [
      "--addr=\"0.0.0.0:{{ item }}\"",
      "--config=/etc/tidb/conf.d/tidb.cnf",
      "--advertise-addr=\"{{ db_nodes_idx[inventory_hostname_short].address }}:{{ item }}\"",
      "--data-dir=\"/data/tidbkv{{ inventory_hostname_short }}_{{ item }}\"",
      "--pd=\"{% for db_node in db_nodes %}{{ db_node.address }}:2379{% if not loop.last %},{% endif%}{% endfor %}\""
    ]
  loop:
    - 20161
    - 20162
    - 20163
    - 20164
    - 20165
    - 20166
    - 20167
    - 20168
    - 20169
    - 20170
    - 20171

    
- name: Waiting for the TiDB PD container to be ready
  shell: "docker logs tidb-kv-{{ inventory_hostname_short }}-{{ item }}"
  register: result
  until: result.stderr.find("listening on") != -1
  retries: 10
  delay: 10
  loop:
    - 20161
    - 20162
    - 20163
    - 20164
    - 20165
    - 20166
    - 20167
    - 20168
    - 20169
    - 20170
    - 20171
    
- name: Waiting for the TiDB KV containers to expose their ports
  wait_for:
    delay: 10
    host: "{{ db_nodes_idx[inventory_hostname_short].address }}"
    port: "{{ item }}"
  loop:
    - 20161
    - 20162
    - 20163
    - 20164
    - 20165
    - 20166
    - 20167
    - 20168
    - 20169
    - 20170
    - 20171

- name: Start the TiDB container
  docker_container:
    name: "tidb-{{ inventory_hostname_short }}"
    image: "pingcap/tidb"
    detach: True
    exposed_ports:
      - 3306
      - 10080
    published_ports:
      - "3306:4000"
      - "10080:10080"
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/data:/data"
      - "/opt/local/etc/tidb/conf.d:/etc/tidb/conf.d"
    command: [
      "--store=tikv",
      "--path=\"{% for db_node in db_nodes %}{{ db_node.address }}:2379{% if not loop.last %},{% endif%}{% endfor %}\""
    ]
  when: inventory_hostname == dbmaster_node


- name: Waiting for the database to be ready
  delay: 10
  wait_for:
    host: "{{ db_nodes_idx[inventory_hostname_short].address }}"
    port: 3306
  when: inventory_hostname == dbmaster_node
  
- name: Install mysql client on master node
  apt:
    name: mysql-client
    state: present
  when: inventory_hostname == dbmaster_node

- name: Change the default root password
  command: |
    mysql -h 127.0.0.1 -u root -e "SET PASSWORD FOR 'root'@'%' = 'my-secret-pw';"
  ignore_errors: True
  when: inventory_hostname == dbmaster_node


#- name: Change the default root password
#  mysql_user:
#    name: root
#    password: my-secret-pw
#    host: "%"
#    login_user: root
#    login_password: ""
#    login_host: "{{ inventory_hostname if not database_network else hostvars[inventory_hostname]['ansible_' + database_network]['ipv4']['address'] }}"
#    priv: '*.*:ALL,GRANT'
#  when: inventory_hostname == dbmaster_node
